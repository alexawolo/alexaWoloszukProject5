{"version":3,"sources":["Components/Queen.js","Components/App.js","serviceWorker.js","index.js"],"names":["Queen","props","imageError","e","state","errored","setState","src","img","className","this","alt","onClick","click","onError","name","quote","Component","App","queenArray","axios","method","url","responseType","params","format","imgonly","then","res","data","randomQueenArray","i","randomNumber","Math","floor","random","length","push","splice","noRepeatQueensArray","event","console","log","map","queen","image_url","handleClick","key","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kRAwCeA,E,YApCX,WAAYC,GAAO,IAAD,8BACd,+CAOJC,WAAa,SAACC,GAML,EAAKC,MAAMC,SACZ,EAAKC,SAAS,CACZC,IAAK,2EACLF,SAAS,KAff,EAAKD,MAAQ,CACTC,SAAS,EACTE,IAAKN,EAAMO,KAJD,E,sEAuBd,OACI,yBAAKC,UAAU,aACX,yBAAKF,IAAKG,KAAKN,MAAMG,IAAKI,IAAI,GAAGC,QAASF,KAAKT,MAAMY,MAAOC,QAASJ,KAAKR,aAC1E,yBAAKO,UAAU,eACX,wBAAIA,UAAU,aAAaC,KAAKT,MAAMc,MACtC,uBAAGN,UAAU,cAAcC,KAAKT,MAAMe,a,GA7BtCC,aCgFLC,E,YAxEb,aAAe,IAAD,8BACZ,+CACKd,MAAQ,CACXe,WAAY,IAHF,E,iFAOO,IAAD,OAElBC,IAAM,CACJC,OAAQ,MACRC,IAAK,gDACLC,aAAc,OACdC,OAAQ,CACNC,OAAQ,OACRC,QAAS,UAGVC,KAAK,SAACC,GAKP,IAHA,IAAMC,EAAI,YAAOD,EAAIC,MACfC,EAAmB,GAEhBC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACzB,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWN,EAAKO,QACnDN,EAAiBO,KAAKR,EAAKG,IAE3BH,EAAKS,OAAON,EAAc,GAM1B,EAAK1B,SAAS,CACZa,WAAYW,EACZS,oBAAqBV,Q,kCAMjBW,GACVC,QAAQC,IAAI,c,+BAML,IAAD,OACN,OACE,yBAAKjC,UAAU,OACb,gEACA,kGACA,yBAAKA,UAAU,YACZC,KAAKN,MAAMe,WAAWwB,IAAI,SAACC,GAG1B,OACE,kBAAC,EAAD,CACEpC,IAAKoC,EAAMC,UACXhC,MAAO,EAAKiC,YACZ/B,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACb+B,IAAKH,EAAMI,a,GAjET/B,aCGEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.ccd4ec77.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n// MAKING COMPONENT TO BRING IN API INFO ON QUEEN CARD\nclass Queen extends Component{\n    constructor(props){\n        super();\n        this.state = {\n            errored: false,\n            src: props.img,\n        }\n    }\n\n    imageError = (e) => {\n        // console.log(e.target);\n\n        // if runs... this.state.errored === true\n        // when loading... \n\n        if (!this.state.errored) {\n            this.setState({\n              src: 'https://ih0.redbubble.net/image.222677543.3720/flat,550x550,075,f.u2.jpg',\n              errored: true,\n            });\n        }\n      }\n\n    render(){\n        return(\n            <div className=\"queenCard\">\n                <img src={this.state.src} alt=\"\" onClick={this.props.click} onError={this.imageError}/>\n                <div className=\"cardContent\">\n                    <h2 className=\"queenName\">{this.props.name}</h2>\n                    <p className=\"queenQuote\">{this.props.quote}</p>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Queen;\n","// IMPORT REACT FROM NODE MODULES\nimport React, {Component} from 'react';\n// IMPORT CSS FILE\nimport '../Styling/App.scss';\n// IMPORT AXIOS FROM THE NODE MODBULES IN ORDER TO MAKE A API CALL\nimport axios from 'axios';\n// IMPORT QUEEN COMPONENT\nimport Queen from './Queen';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      queenArray: []\n    }\n  }\n\n  componentDidMount() {\n\n    axios({\n      method: 'get',\n      url: 'https://www.nokeynoshade.party/api/queens/all',\n      responseType: 'json',\n      params: {\n        format: 'json',\n        imgonly: 'true',\n      }\n\n    }).then((res) => {\n\n      const data = [...res.data];\n      const randomQueenArray = [];\n\n      for (let i = 0; i < 9; i++){\n        let randomNumber = Math.floor(Math.random() * data.length )\n        randomQueenArray.push(data[randomNumber])\n\n        data.splice(randomNumber, 1);\n        // console.log(randomQueenArray);\n\n\n      }\n\n        this.setState({\n          queenArray: randomQueenArray,\n          noRepeatQueensArray: data\n        }\n      );\n    });\n  }\n\n  handleClick(event) {\n    console.log('clicked!');\n\n\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>Don't be a drag, just be a queen</h1>\n        <h2>Click on the queens below to find out their name and famous quote!</h2>\n        <div className=\"allCards\">\n          {this.state.queenArray.map((queen) => {\n            //parameter is queen, the arguement is the object that exist in the array\n            // name of property inside the map and obj has to be the same\n            return (\n              <Queen \n                img={queen.image_url}\n                click={this.handleClick}\n                name={queen.name} \n                quote={queen.quote}\n                key={queen.id}\n              />\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}